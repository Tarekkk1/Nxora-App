rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - allow read/write for authenticated users
    match /users/{userId} {
      allow read, write: if request.auth != null;
    }
    
    // Courses collection - allow read for all, write for authenticated users
    match /courses/{courseId} {
      allow read: if true;
      allow write: if request.auth != null;
      
      // Lessons subcollection
      match /lessons/{lessonId} {
        allow read: if true;
        allow write: if request.auth != null;
      }
    }
    
    // Categories collection - allow read for all, write for authenticated users
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    // Tags collection - allow read for all, write for authenticated users
    match /tags/{tagId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    // Reviews collection - allow read for all, write for authenticated users
    match /reviews/{reviewId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    // App settings - allow read for all, write for authenticated users
    match /app_settings/{settingId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    // Notifications collection - allow read/write for authenticated users
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null;
    }
    
    // Purchase history - allow read/write for authenticated users
    match /purchase_history/{purchaseId} {
      allow read, write: if request.auth != null;
    }
    
    // Student invitations - allow read/write for authenticated users
    match /student_invitations/{invitationId} {
      allow read, write: if request.auth != null;
    }
    
    // Admin functions - only allow for admin users
    match /admin/{document=**} {
      allow read, write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role.hasAny(['admin', 'super_admin']);
    }
  }
}